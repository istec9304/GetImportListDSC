# =============================================
# 📌 엑셀 → SQL VALUES 변환기
# 작성자: 서기대
# 목적: 수용가 단말기 등록용 엑셀 파일을 SQL VALUES 구문으로 자동 변환
# 주요 기능:
#   - 엑셀 파일 선택 창 제공
#   - 정해진 20개 컬럼 기준으로 데이터 파싱
#   - 성공/실패 항목 수 집계
#   - 수용가번호 목록 및 SQL VALUES 구문 출력
#   - 긴 텍스트를 가로/세로 스크롤 가능하게 출력
# =============================================

import pandas as pd
import tkinter as tk
from tkinter import filedialog, messagebox
from datetime import datetime

# 📌 엑셀 컬럼명 정의 (20개 항목)
COLUMNS = [
    '수용가명', '수용가번호', '구주소', '신주소', '경도', '위도', '업종', '소속',
    '블록', '수용가 전화번호', '수용가 대상 년도', '검침원', '검침일', '계량기번호',
    '구경', '통신', '단말 부번호', '단말 주번호', '단말 회사', '단말 설치일'
]

# 📌 기본값 설정 (소속, 단말회사)
SITE_SQ = 4
COMPANY_SQ = 9

# 📌 엑셀 파일을 읽고 SQL VALUES 구문 생성하는 함수
def generate_sql_from_excel():
    # 파일 선택 창 열기
    file_path = filedialog.askopenfilename(title="엑셀 파일 선택", filetypes=[("Excel files", "*.xlsx *.xls")])
    if not file_path:
        messagebox.showwarning("파일 선택", "파일이 선택되지 않았습니다.")
        return

    try:
        # 엑셀 데이터프레임 불러오기 및 공백 채움
        df = pd.read_excel(file_path, dtype=str).fillna('')
        df = df.iloc[:, 1:1+len(COLUMNS)]  # 첫 열 제외 후 20열만 선택
        df.columns = COLUMNS

        values_list = []
        success_count = 0
        fail_count = 0
        success_admin_no_list = []  # 성공한 수용가번호 저장

        # 각 행 반복 처리
        for idx, row in df.iterrows():
            try:
                # SQL용 튜플 값 생성
                values = (
                    row['수용가명'],
                    row['수용가번호'],
                    row['구주소'],
                    row['신주소'],
                    float(row['경도']),
                    float(row['위도']),
                    row['업종'],
                    SITE_SQ,
                    COMPANY_SQ,
                    row['수용가 전화번호'],
                    row['수용가 대상 년도'],
                    row['검침원'],
                    int(row['검침일']),
                    row['계량기번호'],
                    int(row['구경']),
                    row['통신'],
                    row['단말 부번호'],
                    row['단말 주번호'],
                    COMPANY_SQ,
                    f"{pd.to_datetime(row['단말 설치일']).date()}"
                )
                # SQL VALUES 문자열 포맷팅
                formatted = "('{}', '{}', '{}', '{}', {}, {}, '{}', {}, {}, '{}', '{}', '{}', {}, '{}', {}, '{}', '{}', '{}', {}, '{}'::timestamp)".format(*values)
                values_list.append(formatted)
                success_admin_no_list.append(row['수용가번호'])
                success_count += 1
            except Exception as e:
                values_list.append(f"-- [ERROR #{idx+1}] {e}")
                fail_count += 1

        # 결과 출력창 초기화 및 결과 삽입
        result_text.config(state=tk.NORMAL)
        result_text.delete(1.0, tk.END)

        # ✅ 수용가번호 목록 먼저 출력
        result_text.insert(tk.END, "-- ✅ 임포트전 조회할 수용가목록\n")
        result_text.insert(tk.END, ",\n".join(f"'{x}'" for x in success_admin_no_list) + "\n\n")

        # ✅ 성공/실패 통계 출력
        result_text.insert(tk.END, f"-- 총 {len(df)}개 중 {success_count}개 성공, {fail_count}개 실패\n\n")

        # ✅ SQL VALUES 출력
        result_text.insert(tk.END, ",\n".join(values_list))
        result_text.config(state=tk.DISABLED)

    except Exception as e:
        messagebox.showerror("에러 발생", str(e))


# =====================
# 📌 GUI 구성 (Tkinter)
# =====================
window = tk.Tk()
window.title("엑셀 → SQL VALUES 변환기")
window.geometry("1000x600")

# ▶ 버튼 구성
btn = tk.Button(window, text="엑셀 파일 선택 및 SQL 변환", command=generate_sql_from_excel)
btn.pack(pady=10)

# ▶ 결과 출력 프레임
frame = tk.Frame(window)
frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

# ▶ 가로 스크롤바
x_scrollbar = tk.Scrollbar(frame, orient=tk.HORIZONTAL)
x_scrollbar.pack(side=tk.BOTTOM, fill=tk.X)

# ▶ 세로 스크롤바
y_scrollbar = tk.Scrollbar(frame)
y_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

# ▶ 결과 출력 텍스트창 (스크롤 가능)
result_text = tk.Text(frame, wrap=tk.NONE, xscrollcommand=x_scrollbar.set, yscrollcommand=y_scrollbar.set)
result_text.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

x_scrollbar.config(command=result_text.xview)
y_scrollbar.config(command=result_text.yview)

# ▶ 메인 루프 실행
window.mainloop()
